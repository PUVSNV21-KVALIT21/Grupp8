@page
@model HakimsLivs.Pages.Orders.DetailsModel

@{
    ViewData["Title"] = "Details";
}
<link rel="stylesheet" href="~/css/ProductPage.css">
<script src="/js/main.js"></script>

<h1>Beställningar</h1>
<hr />
<form>
    <div class="flexboxTable" id="orders">
        @foreach (var oup in Model.orderUserProductList.OrderBy(date => date.Order.OrderDate))
        {
            @*<table class="tableOrder" id="container @oup.Order.ID">
                <tbody>
                    <tr>
                        <td>
                            <b>Användare:</b> @Html.DisplayFor(model => oup.Username)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <b>Ordernummer:</b> @Html.DisplayFor(model => oup.Order.ID)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <b>Orderdatum:</b> @Html.DisplayFor(model => oup.Order.OrderDate)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <button id="@oup.Order.ID" onclick="javascript:printout();">@oup.Order.ID</button>
                        </td>
                    </tr>
                    @foreach (var product in oup.ProductList)
                    {
                        <tr>
                            <td>
                                <b><u>@Html.DisplayFor(model => product.Product.Name)</u></b>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                @Html.DisplayFor(model => product.Product.Price) * @Html.DisplayFor(model => product.Amount) = @Html.DisplayFor(model => product.TotalPrice)
                            </td>
                        </tr>
                    }
                </tbody>
            </table>*@

        <div id="container @oup.Order.ID">
            <div id="orderlist">
                <p><b>Användare:</b> @Html.DisplayFor(model => oup.Username)</p>
                <p><b>Ordernummer:</b> @Html.DisplayFor(model => oup.Order.ID)</p>
                <p><b>Orderdatum:</b> @Html.DisplayFor(model => oup.Order.OrderDate)</p>
                <p><button id="@oup.Order.ID">@oup.Order.ID</button></p>

                @foreach (var product in oup.ProductList)
                {
                    <p><b><u>@Html.DisplayFor(model => product.Product.Name)</u></b></p>
                    <p> @Html.DisplayFor(model => product.Product.Price) * @Html.DisplayFor(model => product.Amount) = @Html.DisplayFor(model => product.TotalPrice)</p>
                }
            </div>
            </div>
        }
    </div>
</form>
<div>
    <a asp-page="./Index">Back to List</a>
</div>


@section Scripts
{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.2/jspdf.min.js"></script>
    <script>
        window.onload = myMain;

        function myMain() {
            document.getElementById("orders").onclick = buton;
        }

        function buton(e) {
            if (e.target.tagName == 'BUTTON') {
                currentbutton = e.target;
                textp = currentbutton.parentNode;
                box = textp.parentNode;
            }

            var pdf = new jsPDF('p', 'pt', 'letter');
            // source can be HTML-formatted string, or a reference
            // to an actual DOM element from which the text will be scraped.

            source = $(box)[0];

            // we support special element handlers. Register them with jQuery-style
            // ID selector for either ID or node name. ("#iAmID", "div", "span" etc.)
            // There is no support for any other type of selectors
            // (class, of compound) at this time.
            specialElementHandlers = {
                // element with id of "bypass" - jQuery style selector
                '#bypassme': function (element, renderer) {
                    // true = "handled elsewhere, bypass text extraction"
                    return true
                }
            };
            margins = {
                top: 80,
                bottom: 60,
                left: 40,
                width: 522
            };
            // all coords and widths are in jsPDF instance's declared units
            // 'inches' in this case
            pdf.fromHTML(
                source, // HTML string or DOM elem ref.
                margins.left, // x coord
                margins.top, { // y coord
                'width': margins.width, // max width of content on PDF
                'elementHandlers': specialElementHandlers
            },

                function (dispose) {
                    // dispose: object with X, Y of the last line add to the PDF
                    //          this allow the insertion of new lines after html
                    pdf.save('Orderlista.pdf');
                }, margins);

            alert('Orderlista mottagit');
        }
    </script>
}